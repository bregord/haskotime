-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from A1Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Program                             (0)
	Program -> DeclarationsList StatementList          (1)
	DeclarationsList -> Declaration                    (2)
	DeclarationsList -> DeclarationsList Declaration   (3)
	Declaration -> var id ':' TypeInt ';'              (4)
	Declaration -> var id ':' TypeFloat ';'            (5)
	Declaration -> var id ':' TypeString ';'           (6)
	StatementList -> Statement                         (7)
	StatementList -> StatementList ';' Statement       (8)
	Statement -> 'if' id 'then' StatementList endif    (9)
	Statement -> 'if' id 'then' StatementList 'else' StatementList endif   (10)
	Statement -> while id do StatementList done        (11)
	Statement -> print Line ';'                        (12)
	Statement -> read Line ';'                         (13)
	Statement -> id '=' Exp ';'                        (14)
	NUM -> int                                         (15)
	NUM -> float                                       (16)
	Line -> '"' string '"'                             (17)
	Line -> Exp                                        (18)
	Exp -> Exp '*' Exp                                 (19)
	Exp -> Exp '+' Exp                                 (20)
	Exp -> Exp '-' Exp                                 (21)
	Exp -> Exp '/' Exp                                 (22)
	Exp -> '-' Exp                                     (23)
	Exp -> NUM                                         (24)
	Exp -> id                                          (25)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { TokenPlus }
	'*'            { TokenMult }
	'-'            { TokenMinus }
	'/'            { TokenDiv }
	'='            { TokenEqual }
	'"'            { TokenQuote }
	int            { TokenInt $$ }
	float          { TokenFloat $$ }
	TypeFloat      { TokenTypeF }
	TypeInt        { TokenTypeI }
	TypeString     { TokenTypeS }
	string         { TokenString $$ }
	'if'           { TokenIf }
	'then'         { TokenThen }
	'else'         { TokenElse }
	endif          { TokenEndIf }
	while          { TokenWhile }
	done           { TokenDone }
	do             { TokenDo }
	read           { TokenRead }
	print          { TokenPrint }
	id             { TokenId $$ }
	var            { TokenVar }
	';'            { TokenSemicolon }
	':'            { TokenColon }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Program         rule  1
	DeclarationsList rules 2, 3
	Declaration     rules 4, 5, 6
	StatementList   rules 7, 8
	Statement       rules 9, 10, 11, 12, 13, 14
	NUM             rules 15, 16
	Line            rules 17, 18
	Exp             rules 19, 20, 21, 22, 23, 24, 25

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	var            shift, and enter state 4

	Program        goto state 5
	DeclarationsListgoto state 2
	Declaration    goto state 3

State 1


	var            shift, and enter state 4

	DeclarationsListgoto state 2
	Declaration    goto state 3

State 2

	Program -> DeclarationsList . StatementList         (rule 1)
	DeclarationsList -> DeclarationsList . Declaration    (rule 3)

	'if'           shift, and enter state 10
	while          shift, and enter state 11
	read           shift, and enter state 12
	print          shift, and enter state 13
	id             shift, and enter state 14
	var            shift, and enter state 4

	Declaration    goto state 7
	StatementList  goto state 8
	Statement      goto state 9

State 3

	DeclarationsList -> Declaration .                   (rule 2)

	'if'           reduce using rule 2
	while          reduce using rule 2
	read           reduce using rule 2
	print          reduce using rule 2
	id             reduce using rule 2
	var            reduce using rule 2


State 4

	Declaration -> var . id ':' TypeInt ';'             (rule 4)
	Declaration -> var . id ':' TypeFloat ';'           (rule 5)
	Declaration -> var . id ':' TypeString ';'          (rule 6)

	id             shift, and enter state 6


State 5

	%start_calc -> Program .                            (rule 0)

	%eof           accept


State 6

	Declaration -> var id . ':' TypeInt ';'             (rule 4)
	Declaration -> var id . ':' TypeFloat ';'           (rule 5)
	Declaration -> var id . ':' TypeString ';'          (rule 6)

	':'            shift, and enter state 28


State 7

	DeclarationsList -> DeclarationsList Declaration .    (rule 3)

	'if'           reduce using rule 3
	while          reduce using rule 3
	read           reduce using rule 3
	print          reduce using rule 3
	id             reduce using rule 3
	var            reduce using rule 3


State 8

	Program -> DeclarationsList StatementList .         (rule 1)
	StatementList -> StatementList . ';' Statement      (rule 8)

	';'            shift, and enter state 27
	%eof           reduce using rule 1


State 9

	StatementList -> Statement .                        (rule 7)

	'else'         reduce using rule 7
	endif          reduce using rule 7
	done           reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 10

	Statement -> 'if' . id 'then' StatementList endif    (rule 9)
	Statement -> 'if' . id 'then' StatementList 'else' StatementList endif    (rule 10)

	id             shift, and enter state 26


State 11

	Statement -> while . id do StatementList done       (rule 11)

	id             shift, and enter state 25


State 12

	Statement -> read . Line ';'                        (rule 13)

	'-'            shift, and enter state 19
	'"'            shift, and enter state 20
	int            shift, and enter state 21
	float          shift, and enter state 22
	id             shift, and enter state 23

	NUM            goto state 16
	Line           goto state 24
	Exp            goto state 18

State 13

	Statement -> print . Line ';'                       (rule 12)

	'-'            shift, and enter state 19
	'"'            shift, and enter state 20
	int            shift, and enter state 21
	float          shift, and enter state 22
	id             shift, and enter state 23

	NUM            goto state 16
	Line           goto state 17
	Exp            goto state 18

State 14

	Statement -> id . '=' Exp ';'                       (rule 14)

	'='            shift, and enter state 15


State 15

	Statement -> id '=' . Exp ';'                       (rule 14)

	'-'            shift, and enter state 19
	int            shift, and enter state 21
	float          shift, and enter state 22
	id             shift, and enter state 23

	NUM            goto state 16
	Exp            goto state 43

State 16

	Exp -> NUM .                                        (rule 24)

	'+'            reduce using rule 24
	'*'            reduce using rule 24
	'-'            reduce using rule 24
	'/'            reduce using rule 24
	';'            reduce using rule 24


State 17

	Statement -> print Line . ';'                       (rule 12)

	';'            shift, and enter state 42


State 18

	Line -> Exp .                                       (rule 18)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '+' Exp                                (rule 20)
	Exp -> Exp . '-' Exp                                (rule 21)
	Exp -> Exp . '/' Exp                                (rule 22)

	'+'            shift, and enter state 38
	'*'            shift, and enter state 39
	'-'            shift, and enter state 40
	'/'            shift, and enter state 41
	';'            reduce using rule 18


State 19

	Exp -> '-' . Exp                                    (rule 23)

	'-'            shift, and enter state 19
	int            shift, and enter state 21
	float          shift, and enter state 22
	id             shift, and enter state 23

	NUM            goto state 16
	Exp            goto state 37

State 20

	Line -> '"' . string '"'                            (rule 17)

	string         shift, and enter state 36


State 21

	NUM -> int .                                        (rule 15)

	'+'            reduce using rule 15
	'*'            reduce using rule 15
	'-'            reduce using rule 15
	'/'            reduce using rule 15
	';'            reduce using rule 15


State 22

	NUM -> float .                                      (rule 16)

	'+'            reduce using rule 16
	'*'            reduce using rule 16
	'-'            reduce using rule 16
	'/'            reduce using rule 16
	';'            reduce using rule 16


State 23

	Exp -> id .                                         (rule 25)

	'+'            reduce using rule 25
	'*'            reduce using rule 25
	'-'            reduce using rule 25
	'/'            reduce using rule 25
	';'            reduce using rule 25


State 24

	Statement -> read Line . ';'                        (rule 13)

	';'            shift, and enter state 35


State 25

	Statement -> while id . do StatementList done       (rule 11)

	do             shift, and enter state 34


State 26

	Statement -> 'if' id . 'then' StatementList endif    (rule 9)
	Statement -> 'if' id . 'then' StatementList 'else' StatementList endif    (rule 10)

	'then'         shift, and enter state 33


State 27

	StatementList -> StatementList ';' . Statement      (rule 8)

	'if'           shift, and enter state 10
	while          shift, and enter state 11
	read           shift, and enter state 12
	print          shift, and enter state 13
	id             shift, and enter state 14

	Statement      goto state 32

State 28

	Declaration -> var id ':' . TypeInt ';'             (rule 4)
	Declaration -> var id ':' . TypeFloat ';'           (rule 5)
	Declaration -> var id ':' . TypeString ';'          (rule 6)

	TypeFloat      shift, and enter state 29
	TypeInt        shift, and enter state 30
	TypeString     shift, and enter state 31


State 29

	Declaration -> var id ':' TypeFloat . ';'           (rule 5)

	';'            shift, and enter state 54


State 30

	Declaration -> var id ':' TypeInt . ';'             (rule 4)

	';'            shift, and enter state 53


State 31

	Declaration -> var id ':' TypeString . ';'          (rule 6)

	';'            shift, and enter state 52


State 32

	StatementList -> StatementList ';' Statement .      (rule 8)

	'else'         reduce using rule 8
	endif          reduce using rule 8
	done           reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 33

	Statement -> 'if' id 'then' . StatementList endif    (rule 9)
	Statement -> 'if' id 'then' . StatementList 'else' StatementList endif    (rule 10)

	'if'           shift, and enter state 10
	while          shift, and enter state 11
	read           shift, and enter state 12
	print          shift, and enter state 13
	id             shift, and enter state 14

	StatementList  goto state 51
	Statement      goto state 9

State 34

	Statement -> while id do . StatementList done       (rule 11)

	'if'           shift, and enter state 10
	while          shift, and enter state 11
	read           shift, and enter state 12
	print          shift, and enter state 13
	id             shift, and enter state 14

	StatementList  goto state 50
	Statement      goto state 9

State 35

	Statement -> read Line ';' .                        (rule 13)

	'else'         reduce using rule 13
	endif          reduce using rule 13
	done           reduce using rule 13
	';'            reduce using rule 13
	%eof           reduce using rule 13


State 36

	Line -> '"' string . '"'                            (rule 17)

	'"'            shift, and enter state 49


State 37

	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '+' Exp                                (rule 20)
	Exp -> Exp . '-' Exp                                (rule 21)
	Exp -> Exp . '/' Exp                                (rule 22)
	Exp -> '-' Exp .                                    (rule 23)

	'+'            reduce using rule 23
	'*'            reduce using rule 23
	'-'            reduce using rule 23
	'/'            reduce using rule 23
	';'            reduce using rule 23


State 38

	Exp -> Exp '+' . Exp                                (rule 20)

	'-'            shift, and enter state 19
	int            shift, and enter state 21
	float          shift, and enter state 22
	id             shift, and enter state 23

	NUM            goto state 16
	Exp            goto state 48

State 39

	Exp -> Exp '*' . Exp                                (rule 19)

	'-'            shift, and enter state 19
	int            shift, and enter state 21
	float          shift, and enter state 22
	id             shift, and enter state 23

	NUM            goto state 16
	Exp            goto state 47

State 40

	Exp -> Exp '-' . Exp                                (rule 21)

	'-'            shift, and enter state 19
	int            shift, and enter state 21
	float          shift, and enter state 22
	id             shift, and enter state 23

	NUM            goto state 16
	Exp            goto state 46

State 41

	Exp -> Exp '/' . Exp                                (rule 22)

	'-'            shift, and enter state 19
	int            shift, and enter state 21
	float          shift, and enter state 22
	id             shift, and enter state 23

	NUM            goto state 16
	Exp            goto state 45

State 42

	Statement -> print Line ';' .                       (rule 12)

	'else'         reduce using rule 12
	endif          reduce using rule 12
	done           reduce using rule 12
	';'            reduce using rule 12
	%eof           reduce using rule 12


State 43

	Statement -> id '=' Exp . ';'                       (rule 14)
	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '+' Exp                                (rule 20)
	Exp -> Exp . '-' Exp                                (rule 21)
	Exp -> Exp . '/' Exp                                (rule 22)

	'+'            shift, and enter state 38
	'*'            shift, and enter state 39
	'-'            shift, and enter state 40
	'/'            shift, and enter state 41
	';'            shift, and enter state 44


State 44

	Statement -> id '=' Exp ';' .                       (rule 14)

	'else'         reduce using rule 14
	endif          reduce using rule 14
	done           reduce using rule 14
	';'            reduce using rule 14
	%eof           reduce using rule 14


State 45

	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '+' Exp                                (rule 20)
	Exp -> Exp . '-' Exp                                (rule 21)
	Exp -> Exp . '/' Exp                                (rule 22)
	Exp -> Exp '/' Exp .                                (rule 22)

	'+'            reduce using rule 22
	'*'            reduce using rule 22
	'-'            reduce using rule 22
	'/'            reduce using rule 22
	';'            reduce using rule 22


State 46

	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '+' Exp                                (rule 20)
	Exp -> Exp . '-' Exp                                (rule 21)
	Exp -> Exp '-' Exp .                                (rule 21)
	Exp -> Exp . '/' Exp                                (rule 22)

	'+'            reduce using rule 21
	'*'            shift, and enter state 39
	'-'            reduce using rule 21
	'/'            shift, and enter state 41
	';'            reduce using rule 21


State 47

	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp '*' Exp .                                (rule 19)
	Exp -> Exp . '+' Exp                                (rule 20)
	Exp -> Exp . '-' Exp                                (rule 21)
	Exp -> Exp . '/' Exp                                (rule 22)

	'+'            reduce using rule 19
	'*'            reduce using rule 19
	'-'            reduce using rule 19
	'/'            reduce using rule 19
	';'            reduce using rule 19


State 48

	Exp -> Exp . '*' Exp                                (rule 19)
	Exp -> Exp . '+' Exp                                (rule 20)
	Exp -> Exp '+' Exp .                                (rule 20)
	Exp -> Exp . '-' Exp                                (rule 21)
	Exp -> Exp . '/' Exp                                (rule 22)

	'+'            reduce using rule 20
	'*'            shift, and enter state 39
	'-'            reduce using rule 20
	'/'            shift, and enter state 41
	';'            reduce using rule 20


State 49

	Line -> '"' string '"' .                            (rule 17)

	';'            reduce using rule 17


State 50

	StatementList -> StatementList . ';' Statement      (rule 8)
	Statement -> while id do StatementList . done       (rule 11)

	done           shift, and enter state 57
	';'            shift, and enter state 27


State 51

	StatementList -> StatementList . ';' Statement      (rule 8)
	Statement -> 'if' id 'then' StatementList . endif    (rule 9)
	Statement -> 'if' id 'then' StatementList . 'else' StatementList endif    (rule 10)

	'else'         shift, and enter state 55
	endif          shift, and enter state 56
	';'            shift, and enter state 27


State 52

	Declaration -> var id ':' TypeString ';' .          (rule 6)

	'if'           reduce using rule 6
	while          reduce using rule 6
	read           reduce using rule 6
	print          reduce using rule 6
	id             reduce using rule 6
	var            reduce using rule 6


State 53

	Declaration -> var id ':' TypeInt ';' .             (rule 4)

	'if'           reduce using rule 4
	while          reduce using rule 4
	read           reduce using rule 4
	print          reduce using rule 4
	id             reduce using rule 4
	var            reduce using rule 4


State 54

	Declaration -> var id ':' TypeFloat ';' .           (rule 5)

	'if'           reduce using rule 5
	while          reduce using rule 5
	read           reduce using rule 5
	print          reduce using rule 5
	id             reduce using rule 5
	var            reduce using rule 5


State 55

	Statement -> 'if' id 'then' StatementList 'else' . StatementList endif    (rule 10)

	'if'           shift, and enter state 10
	while          shift, and enter state 11
	read           shift, and enter state 12
	print          shift, and enter state 13
	id             shift, and enter state 14

	StatementList  goto state 58
	Statement      goto state 9

State 56

	Statement -> 'if' id 'then' StatementList endif .    (rule 9)

	'else'         reduce using rule 9
	endif          reduce using rule 9
	done           reduce using rule 9
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 57

	Statement -> while id do StatementList done .       (rule 11)

	'else'         reduce using rule 11
	endif          reduce using rule 11
	done           reduce using rule 11
	';'            reduce using rule 11
	%eof           reduce using rule 11


State 58

	StatementList -> StatementList . ';' Statement      (rule 8)
	Statement -> 'if' id 'then' StatementList 'else' StatementList . endif    (rule 10)

	endif          shift, and enter state 59
	';'            shift, and enter state 27


State 59

	Statement -> 'if' id 'then' StatementList 'else' StatementList endif .    (rule 10)

	'else'         reduce using rule 10
	endif          reduce using rule 10
	done           reduce using rule 10
	';'            reduce using rule 10
	%eof           reduce using rule 10


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 26
Number of terminals: 25
Number of non-terminals: 9
Number of states: 60
